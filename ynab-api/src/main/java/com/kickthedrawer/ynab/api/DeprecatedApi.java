/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kickthedrawer.ynab.api;

import com.kickthedrawer.ynab.ApiCallback;
import com.kickthedrawer.ynab.ApiClient;
import com.kickthedrawer.ynab.ApiException;
import com.kickthedrawer.ynab.ApiResponse;
import com.kickthedrawer.ynab.Configuration;
import com.kickthedrawer.ynab.Pair;
import com.kickthedrawer.ynab.ProgressRequestBody;
import com.kickthedrawer.ynab.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kickthedrawer.ynab.model.BulkResponse;
import com.kickthedrawer.ynab.model.BulkTransactions;
import com.kickthedrawer.ynab.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DeprecatedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeprecatedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeprecatedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkCreateTransactions
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget). (required)
     * @param transactions The list of transactions to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The bulk request was processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request could not be understood due to malformed syntax or validation error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateTransactionsCall(String budgetId, BulkTransactions transactions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactions;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/bulk"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateTransactionsValidateBeforeCall(String budgetId, BulkTransactions transactions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling bulkCreateTransactions(Async)");
        }

        // verify the required parameter 'transactions' is set
        if (transactions == null) {
            throw new ApiException("Missing the required parameter 'transactions' when calling bulkCreateTransactions(Async)");
        }

        return bulkCreateTransactionsCall(budgetId, transactions, _callback);

    }

    /**
     * Bulk create transactions
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use &#39;POST /budgets/{budget_id}/transactions&#39; to create multiple transactions.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget). (required)
     * @param transactions The list of transactions to create (required)
     * @return BulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The bulk request was processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request could not be understood due to malformed syntax or validation error(s) </td><td>  -  </td></tr>
     </table>
     */
    public BulkResponse bulkCreateTransactions(String budgetId, BulkTransactions transactions) throws ApiException {
        ApiResponse<BulkResponse> localVarResp = bulkCreateTransactionsWithHttpInfo(budgetId, transactions);
        return localVarResp.getData();
    }

    /**
     * Bulk create transactions
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use &#39;POST /budgets/{budget_id}/transactions&#39; to create multiple transactions.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget). (required)
     * @param transactions The list of transactions to create (required)
     * @return ApiResponse&lt;BulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The bulk request was processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request could not be understood due to malformed syntax or validation error(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkResponse> bulkCreateTransactionsWithHttpInfo(String budgetId, BulkTransactions transactions) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateTransactionsValidateBeforeCall(budgetId, transactions, null);
        Type localVarReturnType = new TypeToken<BulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk create transactions (asynchronously)
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use &#39;POST /budgets/{budget_id}/transactions&#39; to create multiple transactions.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget). (required)
     * @param transactions The list of transactions to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The bulk request was processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request could not be understood due to malformed syntax or validation error(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkCreateTransactionsAsync(String budgetId, BulkTransactions transactions, final ApiCallback<BulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateTransactionsValidateBeforeCall(budgetId, transactions, _callback);
        Type localVarReturnType = new TypeToken<BulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
