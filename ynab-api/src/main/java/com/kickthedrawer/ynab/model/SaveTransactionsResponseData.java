/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kickthedrawer.ynab.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kickthedrawer.ynab.model.TransactionDetail;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kickthedrawer.ynab.JSON;

/**
 * SaveTransactionsResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-18T14:52:04.431395-07:00[America/Phoenix]")
public class SaveTransactionsResponseData {
  public static final String SERIALIZED_NAME_TRANSACTION_IDS = "transaction_ids";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_IDS)
  private List<String> transactionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private TransactionDetail transaction;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<TransactionDetail> transactions = null;

  public static final String SERIALIZED_NAME_DUPLICATE_IMPORT_IDS = "duplicate_import_ids";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_IMPORT_IDS)
  private List<String> duplicateImportIds = null;

  public static final String SERIALIZED_NAME_SERVER_KNOWLEDGE = "server_knowledge";
  @SerializedName(SERIALIZED_NAME_SERVER_KNOWLEDGE)
  private Long serverKnowledge;

  public SaveTransactionsResponseData() {
  }

  public SaveTransactionsResponseData transactionIds(List<String> transactionIds) {
    
    this.transactionIds = transactionIds;
    return this;
  }

  public SaveTransactionsResponseData addTransactionIdsItem(String transactionIdsItem) {
    this.transactionIds.add(transactionIdsItem);
    return this;
  }

   /**
   * The transaction ids that were saved
   * @return transactionIds
  **/
  @javax.annotation.Nonnull

  public List<String> getTransactionIds() {
    return transactionIds;
  }


  public void setTransactionIds(List<String> transactionIds) {
    this.transactionIds = transactionIds;
  }


  public SaveTransactionsResponseData transaction(TransactionDetail transaction) {
    
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @javax.annotation.Nullable

  public TransactionDetail getTransaction() {
    return transaction;
  }


  public void setTransaction(TransactionDetail transaction) {
    this.transaction = transaction;
  }


  public SaveTransactionsResponseData transactions(List<TransactionDetail> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public SaveTransactionsResponseData addTransactionsItem(TransactionDetail transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * If multiple transactions were specified, the transactions that were saved
   * @return transactions
  **/
  @javax.annotation.Nullable

  public List<TransactionDetail> getTransactions() {
    return transactions;
  }


  public void setTransactions(List<TransactionDetail> transactions) {
    this.transactions = transactions;
  }


  public SaveTransactionsResponseData duplicateImportIds(List<String> duplicateImportIds) {
    
    this.duplicateImportIds = duplicateImportIds;
    return this;
  }

  public SaveTransactionsResponseData addDuplicateImportIdsItem(String duplicateImportIdsItem) {
    if (this.duplicateImportIds == null) {
      this.duplicateImportIds = new ArrayList<>();
    }
    this.duplicateImportIds.add(duplicateImportIdsItem);
    return this;
  }

   /**
   * If multiple transactions were specified, a list of import_ids that were not created because of an existing &#x60;import_id&#x60; found on the same account
   * @return duplicateImportIds
  **/
  @javax.annotation.Nullable

  public List<String> getDuplicateImportIds() {
    return duplicateImportIds;
  }


  public void setDuplicateImportIds(List<String> duplicateImportIds) {
    this.duplicateImportIds = duplicateImportIds;
  }


  public SaveTransactionsResponseData serverKnowledge(Long serverKnowledge) {
    
    this.serverKnowledge = serverKnowledge;
    return this;
  }

   /**
   * The knowledge of the server
   * @return serverKnowledge
  **/
  @javax.annotation.Nonnull

  public Long getServerKnowledge() {
    return serverKnowledge;
  }


  public void setServerKnowledge(Long serverKnowledge) {
    this.serverKnowledge = serverKnowledge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveTransactionsResponseData saveTransactionsResponseData = (SaveTransactionsResponseData) o;
    return Objects.equals(this.transactionIds, saveTransactionsResponseData.transactionIds) &&
        Objects.equals(this.transaction, saveTransactionsResponseData.transaction) &&
        Objects.equals(this.transactions, saveTransactionsResponseData.transactions) &&
        Objects.equals(this.duplicateImportIds, saveTransactionsResponseData.duplicateImportIds) &&
        Objects.equals(this.serverKnowledge, saveTransactionsResponseData.serverKnowledge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionIds, transaction, transactions, duplicateImportIds, serverKnowledge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveTransactionsResponseData {\n");
    sb.append("    transactionIds: ").append(toIndentedString(transactionIds)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    duplicateImportIds: ").append(toIndentedString(duplicateImportIds)).append("\n");
    sb.append("    serverKnowledge: ").append(toIndentedString(serverKnowledge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transaction_ids");
    openapiFields.add("transaction");
    openapiFields.add("transactions");
    openapiFields.add("duplicate_import_ids");
    openapiFields.add("server_knowledge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transaction_ids");
    openapiRequiredFields.add("server_knowledge");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SaveTransactionsResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SaveTransactionsResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaveTransactionsResponseData is not found in the empty JSON string", SaveTransactionsResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SaveTransactionsResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaveTransactionsResponseData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaveTransactionsResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("transaction_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("transaction_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_ids` to be an array in the JSON string but got `%s`", jsonObj.get("transaction_ids").toString()));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        TransactionDetail.validateJsonObject(jsonObj.getAsJsonObject("transaction"));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            TransactionDetail.validateJsonObject(jsonArraytransactions.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("duplicate_import_ids") != null && !jsonObj.get("duplicate_import_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplicate_import_ids` to be an array in the JSON string but got `%s`", jsonObj.get("duplicate_import_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaveTransactionsResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaveTransactionsResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaveTransactionsResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaveTransactionsResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<SaveTransactionsResponseData>() {
           @Override
           public void write(JsonWriter out, SaveTransactionsResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaveTransactionsResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaveTransactionsResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaveTransactionsResponseData
  * @throws IOException if the JSON string is invalid with respect to SaveTransactionsResponseData
  */
  public static SaveTransactionsResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaveTransactionsResponseData.class);
  }

 /**
  * Convert an instance of SaveTransactionsResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

