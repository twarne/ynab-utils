/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kickthedrawer.ynab.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kickthedrawer.ynab.model.Account;
import com.kickthedrawer.ynab.model.Category;
import com.kickthedrawer.ynab.model.CategoryGroup;
import com.kickthedrawer.ynab.model.CurrencyFormat;
import com.kickthedrawer.ynab.model.DateFormat;
import com.kickthedrawer.ynab.model.MonthDetail;
import com.kickthedrawer.ynab.model.Payee;
import com.kickthedrawer.ynab.model.PayeeLocation;
import com.kickthedrawer.ynab.model.ScheduledSubTransaction;
import com.kickthedrawer.ynab.model.ScheduledTransactionSummary;
import com.kickthedrawer.ynab.model.SubTransaction;
import com.kickthedrawer.ynab.model.TransactionSummary;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kickthedrawer.ynab.JSON;

/**
 * BudgetDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-18T14:52:04.431395-07:00[America/Phoenix]")
public class BudgetDetail {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_ON = "last_modified_on";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_ON)
  private OffsetDateTime lastModifiedOn;

  public static final String SERIALIZED_NAME_FIRST_MONTH = "first_month";
  @SerializedName(SERIALIZED_NAME_FIRST_MONTH)
  private LocalDate firstMonth;

  public static final String SERIALIZED_NAME_LAST_MONTH = "last_month";
  @SerializedName(SERIALIZED_NAME_LAST_MONTH)
  private LocalDate lastMonth;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "date_format";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private DateFormat dateFormat;

  public static final String SERIALIZED_NAME_CURRENCY_FORMAT = "currency_format";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FORMAT)
  private CurrencyFormat currencyFormat;

  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List<Account> accounts = null;

  public static final String SERIALIZED_NAME_PAYEES = "payees";
  @SerializedName(SERIALIZED_NAME_PAYEES)
  private List<Payee> payees = null;

  public static final String SERIALIZED_NAME_PAYEE_LOCATIONS = "payee_locations";
  @SerializedName(SERIALIZED_NAME_PAYEE_LOCATIONS)
  private List<PayeeLocation> payeeLocations = null;

  public static final String SERIALIZED_NAME_CATEGORY_GROUPS = "category_groups";
  @SerializedName(SERIALIZED_NAME_CATEGORY_GROUPS)
  private List<CategoryGroup> categoryGroups = null;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = null;

  public static final String SERIALIZED_NAME_MONTHS = "months";
  @SerializedName(SERIALIZED_NAME_MONTHS)
  private List<MonthDetail> months = null;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<TransactionSummary> transactions = null;

  public static final String SERIALIZED_NAME_SUBTRANSACTIONS = "subtransactions";
  @SerializedName(SERIALIZED_NAME_SUBTRANSACTIONS)
  private List<SubTransaction> subtransactions = null;

  public static final String SERIALIZED_NAME_SCHEDULED_TRANSACTIONS = "scheduled_transactions";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TRANSACTIONS)
  private List<ScheduledTransactionSummary> scheduledTransactions = null;

  public static final String SERIALIZED_NAME_SCHEDULED_SUBTRANSACTIONS = "scheduled_subtransactions";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_SUBTRANSACTIONS)
  private List<ScheduledSubTransaction> scheduledSubtransactions = null;

  public BudgetDetail() {
  }

  public BudgetDetail id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public BudgetDetail name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public BudgetDetail lastModifiedOn(OffsetDateTime lastModifiedOn) {
    
    this.lastModifiedOn = lastModifiedOn;
    return this;
  }

   /**
   * The last time any changes were made to the budget from either a web or mobile client
   * @return lastModifiedOn
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getLastModifiedOn() {
    return lastModifiedOn;
  }


  public void setLastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
  }


  public BudgetDetail firstMonth(LocalDate firstMonth) {
    
    this.firstMonth = firstMonth;
    return this;
  }

   /**
   * The earliest budget month
   * @return firstMonth
  **/
  @javax.annotation.Nullable

  public LocalDate getFirstMonth() {
    return firstMonth;
  }


  public void setFirstMonth(LocalDate firstMonth) {
    this.firstMonth = firstMonth;
  }


  public BudgetDetail lastMonth(LocalDate lastMonth) {
    
    this.lastMonth = lastMonth;
    return this;
  }

   /**
   * The latest budget month
   * @return lastMonth
  **/
  @javax.annotation.Nullable

  public LocalDate getLastMonth() {
    return lastMonth;
  }


  public void setLastMonth(LocalDate lastMonth) {
    this.lastMonth = lastMonth;
  }


  public BudgetDetail dateFormat(DateFormat dateFormat) {
    
    this.dateFormat = dateFormat;
    return this;
  }

   /**
   * Get dateFormat
   * @return dateFormat
  **/
  @javax.annotation.Nullable

  public DateFormat getDateFormat() {
    return dateFormat;
  }


  public void setDateFormat(DateFormat dateFormat) {
    this.dateFormat = dateFormat;
  }


  public BudgetDetail currencyFormat(CurrencyFormat currencyFormat) {
    
    this.currencyFormat = currencyFormat;
    return this;
  }

   /**
   * Get currencyFormat
   * @return currencyFormat
  **/
  @javax.annotation.Nullable

  public CurrencyFormat getCurrencyFormat() {
    return currencyFormat;
  }


  public void setCurrencyFormat(CurrencyFormat currencyFormat) {
    this.currencyFormat = currencyFormat;
  }


  public BudgetDetail accounts(List<Account> accounts) {
    
    this.accounts = accounts;
    return this;
  }

  public BudgetDetail addAccountsItem(Account accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * Get accounts
   * @return accounts
  **/
  @javax.annotation.Nullable

  public List<Account> getAccounts() {
    return accounts;
  }


  public void setAccounts(List<Account> accounts) {
    this.accounts = accounts;
  }


  public BudgetDetail payees(List<Payee> payees) {
    
    this.payees = payees;
    return this;
  }

  public BudgetDetail addPayeesItem(Payee payeesItem) {
    if (this.payees == null) {
      this.payees = new ArrayList<>();
    }
    this.payees.add(payeesItem);
    return this;
  }

   /**
   * Get payees
   * @return payees
  **/
  @javax.annotation.Nullable

  public List<Payee> getPayees() {
    return payees;
  }


  public void setPayees(List<Payee> payees) {
    this.payees = payees;
  }


  public BudgetDetail payeeLocations(List<PayeeLocation> payeeLocations) {
    
    this.payeeLocations = payeeLocations;
    return this;
  }

  public BudgetDetail addPayeeLocationsItem(PayeeLocation payeeLocationsItem) {
    if (this.payeeLocations == null) {
      this.payeeLocations = new ArrayList<>();
    }
    this.payeeLocations.add(payeeLocationsItem);
    return this;
  }

   /**
   * Get payeeLocations
   * @return payeeLocations
  **/
  @javax.annotation.Nullable

  public List<PayeeLocation> getPayeeLocations() {
    return payeeLocations;
  }


  public void setPayeeLocations(List<PayeeLocation> payeeLocations) {
    this.payeeLocations = payeeLocations;
  }


  public BudgetDetail categoryGroups(List<CategoryGroup> categoryGroups) {
    
    this.categoryGroups = categoryGroups;
    return this;
  }

  public BudgetDetail addCategoryGroupsItem(CategoryGroup categoryGroupsItem) {
    if (this.categoryGroups == null) {
      this.categoryGroups = new ArrayList<>();
    }
    this.categoryGroups.add(categoryGroupsItem);
    return this;
  }

   /**
   * Get categoryGroups
   * @return categoryGroups
  **/
  @javax.annotation.Nullable

  public List<CategoryGroup> getCategoryGroups() {
    return categoryGroups;
  }


  public void setCategoryGroups(List<CategoryGroup> categoryGroups) {
    this.categoryGroups = categoryGroups;
  }


  public BudgetDetail categories(List<Category> categories) {
    
    this.categories = categories;
    return this;
  }

  public BudgetDetail addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable

  public List<Category> getCategories() {
    return categories;
  }


  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public BudgetDetail months(List<MonthDetail> months) {
    
    this.months = months;
    return this;
  }

  public BudgetDetail addMonthsItem(MonthDetail monthsItem) {
    if (this.months == null) {
      this.months = new ArrayList<>();
    }
    this.months.add(monthsItem);
    return this;
  }

   /**
   * Get months
   * @return months
  **/
  @javax.annotation.Nullable

  public List<MonthDetail> getMonths() {
    return months;
  }


  public void setMonths(List<MonthDetail> months) {
    this.months = months;
  }


  public BudgetDetail transactions(List<TransactionSummary> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public BudgetDetail addTransactionsItem(TransactionSummary transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @javax.annotation.Nullable

  public List<TransactionSummary> getTransactions() {
    return transactions;
  }


  public void setTransactions(List<TransactionSummary> transactions) {
    this.transactions = transactions;
  }


  public BudgetDetail subtransactions(List<SubTransaction> subtransactions) {
    
    this.subtransactions = subtransactions;
    return this;
  }

  public BudgetDetail addSubtransactionsItem(SubTransaction subtransactionsItem) {
    if (this.subtransactions == null) {
      this.subtransactions = new ArrayList<>();
    }
    this.subtransactions.add(subtransactionsItem);
    return this;
  }

   /**
   * Get subtransactions
   * @return subtransactions
  **/
  @javax.annotation.Nullable

  public List<SubTransaction> getSubtransactions() {
    return subtransactions;
  }


  public void setSubtransactions(List<SubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
  }


  public BudgetDetail scheduledTransactions(List<ScheduledTransactionSummary> scheduledTransactions) {
    
    this.scheduledTransactions = scheduledTransactions;
    return this;
  }

  public BudgetDetail addScheduledTransactionsItem(ScheduledTransactionSummary scheduledTransactionsItem) {
    if (this.scheduledTransactions == null) {
      this.scheduledTransactions = new ArrayList<>();
    }
    this.scheduledTransactions.add(scheduledTransactionsItem);
    return this;
  }

   /**
   * Get scheduledTransactions
   * @return scheduledTransactions
  **/
  @javax.annotation.Nullable

  public List<ScheduledTransactionSummary> getScheduledTransactions() {
    return scheduledTransactions;
  }


  public void setScheduledTransactions(List<ScheduledTransactionSummary> scheduledTransactions) {
    this.scheduledTransactions = scheduledTransactions;
  }


  public BudgetDetail scheduledSubtransactions(List<ScheduledSubTransaction> scheduledSubtransactions) {
    
    this.scheduledSubtransactions = scheduledSubtransactions;
    return this;
  }

  public BudgetDetail addScheduledSubtransactionsItem(ScheduledSubTransaction scheduledSubtransactionsItem) {
    if (this.scheduledSubtransactions == null) {
      this.scheduledSubtransactions = new ArrayList<>();
    }
    this.scheduledSubtransactions.add(scheduledSubtransactionsItem);
    return this;
  }

   /**
   * Get scheduledSubtransactions
   * @return scheduledSubtransactions
  **/
  @javax.annotation.Nullable

  public List<ScheduledSubTransaction> getScheduledSubtransactions() {
    return scheduledSubtransactions;
  }


  public void setScheduledSubtransactions(List<ScheduledSubTransaction> scheduledSubtransactions) {
    this.scheduledSubtransactions = scheduledSubtransactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetDetail budgetDetail = (BudgetDetail) o;
    return Objects.equals(this.id, budgetDetail.id) &&
        Objects.equals(this.name, budgetDetail.name) &&
        Objects.equals(this.lastModifiedOn, budgetDetail.lastModifiedOn) &&
        Objects.equals(this.firstMonth, budgetDetail.firstMonth) &&
        Objects.equals(this.lastMonth, budgetDetail.lastMonth) &&
        Objects.equals(this.dateFormat, budgetDetail.dateFormat) &&
        Objects.equals(this.currencyFormat, budgetDetail.currencyFormat) &&
        Objects.equals(this.accounts, budgetDetail.accounts) &&
        Objects.equals(this.payees, budgetDetail.payees) &&
        Objects.equals(this.payeeLocations, budgetDetail.payeeLocations) &&
        Objects.equals(this.categoryGroups, budgetDetail.categoryGroups) &&
        Objects.equals(this.categories, budgetDetail.categories) &&
        Objects.equals(this.months, budgetDetail.months) &&
        Objects.equals(this.transactions, budgetDetail.transactions) &&
        Objects.equals(this.subtransactions, budgetDetail.subtransactions) &&
        Objects.equals(this.scheduledTransactions, budgetDetail.scheduledTransactions) &&
        Objects.equals(this.scheduledSubtransactions, budgetDetail.scheduledSubtransactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, lastModifiedOn, firstMonth, lastMonth, dateFormat, currencyFormat, accounts, payees, payeeLocations, categoryGroups, categories, months, transactions, subtransactions, scheduledTransactions, scheduledSubtransactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetDetail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    lastModifiedOn: ").append(toIndentedString(lastModifiedOn)).append("\n");
    sb.append("    firstMonth: ").append(toIndentedString(firstMonth)).append("\n");
    sb.append("    lastMonth: ").append(toIndentedString(lastMonth)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    currencyFormat: ").append(toIndentedString(currencyFormat)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    payees: ").append(toIndentedString(payees)).append("\n");
    sb.append("    payeeLocations: ").append(toIndentedString(payeeLocations)).append("\n");
    sb.append("    categoryGroups: ").append(toIndentedString(categoryGroups)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    months: ").append(toIndentedString(months)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    subtransactions: ").append(toIndentedString(subtransactions)).append("\n");
    sb.append("    scheduledTransactions: ").append(toIndentedString(scheduledTransactions)).append("\n");
    sb.append("    scheduledSubtransactions: ").append(toIndentedString(scheduledSubtransactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("last_modified_on");
    openapiFields.add("first_month");
    openapiFields.add("last_month");
    openapiFields.add("date_format");
    openapiFields.add("currency_format");
    openapiFields.add("accounts");
    openapiFields.add("payees");
    openapiFields.add("payee_locations");
    openapiFields.add("category_groups");
    openapiFields.add("categories");
    openapiFields.add("months");
    openapiFields.add("transactions");
    openapiFields.add("subtransactions");
    openapiFields.add("scheduled_transactions");
    openapiFields.add("scheduled_subtransactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BudgetDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BudgetDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetDetail is not found in the empty JSON string", BudgetDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BudgetDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BudgetDetail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `date_format`
      if (jsonObj.get("date_format") != null && !jsonObj.get("date_format").isJsonNull()) {
        DateFormat.validateJsonObject(jsonObj.getAsJsonObject("date_format"));
      }
      // validate the optional field `currency_format`
      if (jsonObj.get("currency_format") != null && !jsonObj.get("currency_format").isJsonNull()) {
        CurrencyFormat.validateJsonObject(jsonObj.getAsJsonObject("currency_format"));
      }
      if (jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull()) {
        JsonArray jsonArrayaccounts = jsonObj.getAsJsonArray("accounts");
        if (jsonArrayaccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
          }

          // validate the optional field `accounts` (array)
          for (int i = 0; i < jsonArrayaccounts.size(); i++) {
            Account.validateJsonObject(jsonArrayaccounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("payees") != null && !jsonObj.get("payees").isJsonNull()) {
        JsonArray jsonArraypayees = jsonObj.getAsJsonArray("payees");
        if (jsonArraypayees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payees` to be an array in the JSON string but got `%s`", jsonObj.get("payees").toString()));
          }

          // validate the optional field `payees` (array)
          for (int i = 0; i < jsonArraypayees.size(); i++) {
            Payee.validateJsonObject(jsonArraypayees.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("payee_locations") != null && !jsonObj.get("payee_locations").isJsonNull()) {
        JsonArray jsonArraypayeeLocations = jsonObj.getAsJsonArray("payee_locations");
        if (jsonArraypayeeLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payee_locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payee_locations` to be an array in the JSON string but got `%s`", jsonObj.get("payee_locations").toString()));
          }

          // validate the optional field `payee_locations` (array)
          for (int i = 0; i < jsonArraypayeeLocations.size(); i++) {
            PayeeLocation.validateJsonObject(jsonArraypayeeLocations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("category_groups") != null && !jsonObj.get("category_groups").isJsonNull()) {
        JsonArray jsonArraycategoryGroups = jsonObj.getAsJsonArray("category_groups");
        if (jsonArraycategoryGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("category_groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `category_groups` to be an array in the JSON string but got `%s`", jsonObj.get("category_groups").toString()));
          }

          // validate the optional field `category_groups` (array)
          for (int i = 0; i < jsonArraycategoryGroups.size(); i++) {
            CategoryGroup.validateJsonObject(jsonArraycategoryGroups.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            Category.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("months") != null && !jsonObj.get("months").isJsonNull()) {
        JsonArray jsonArraymonths = jsonObj.getAsJsonArray("months");
        if (jsonArraymonths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("months").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `months` to be an array in the JSON string but got `%s`", jsonObj.get("months").toString()));
          }

          // validate the optional field `months` (array)
          for (int i = 0; i < jsonArraymonths.size(); i++) {
            MonthDetail.validateJsonObject(jsonArraymonths.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            TransactionSummary.validateJsonObject(jsonArraytransactions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("subtransactions") != null && !jsonObj.get("subtransactions").isJsonNull()) {
        JsonArray jsonArraysubtransactions = jsonObj.getAsJsonArray("subtransactions");
        if (jsonArraysubtransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subtransactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subtransactions` to be an array in the JSON string but got `%s`", jsonObj.get("subtransactions").toString()));
          }

          // validate the optional field `subtransactions` (array)
          for (int i = 0; i < jsonArraysubtransactions.size(); i++) {
            SubTransaction.validateJsonObject(jsonArraysubtransactions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("scheduled_transactions") != null && !jsonObj.get("scheduled_transactions").isJsonNull()) {
        JsonArray jsonArrayscheduledTransactions = jsonObj.getAsJsonArray("scheduled_transactions");
        if (jsonArrayscheduledTransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scheduled_transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scheduled_transactions` to be an array in the JSON string but got `%s`", jsonObj.get("scheduled_transactions").toString()));
          }

          // validate the optional field `scheduled_transactions` (array)
          for (int i = 0; i < jsonArrayscheduledTransactions.size(); i++) {
            ScheduledTransactionSummary.validateJsonObject(jsonArrayscheduledTransactions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("scheduled_subtransactions") != null && !jsonObj.get("scheduled_subtransactions").isJsonNull()) {
        JsonArray jsonArrayscheduledSubtransactions = jsonObj.getAsJsonArray("scheduled_subtransactions");
        if (jsonArrayscheduledSubtransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scheduled_subtransactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scheduled_subtransactions` to be an array in the JSON string but got `%s`", jsonObj.get("scheduled_subtransactions").toString()));
          }

          // validate the optional field `scheduled_subtransactions` (array)
          for (int i = 0; i < jsonArrayscheduledSubtransactions.size(); i++) {
            ScheduledSubTransaction.validateJsonObject(jsonArrayscheduledSubtransactions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetDetail>() {
           @Override
           public void write(JsonWriter out, BudgetDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BudgetDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BudgetDetail
  * @throws IOException if the JSON string is invalid with respect to BudgetDetail
  */
  public static BudgetDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetDetail.class);
  }

 /**
  * Convert an instance of BudgetDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

