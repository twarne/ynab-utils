/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kickthedrawer.ynab.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kickthedrawer.ynab.JSON;

/**
 * ScheduledSubTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-18T14:52:04.431395-07:00[America/Phoenix]")
public class ScheduledSubTransaction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_SCHEDULED_TRANSACTION_ID = "scheduled_transaction_id";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TRANSACTION_ID)
  private UUID scheduledTransactionId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_PAYEE_ID = "payee_id";
  @SerializedName(SERIALIZED_NAME_PAYEE_ID)
  private UUID payeeId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private UUID categoryId;

  public static final String SERIALIZED_NAME_TRANSFER_ACCOUNT_ID = "transfer_account_id";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ACCOUNT_ID)
  private UUID transferAccountId;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public ScheduledSubTransaction() {
  }

  public ScheduledSubTransaction id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ScheduledSubTransaction scheduledTransactionId(UUID scheduledTransactionId) {
    
    this.scheduledTransactionId = scheduledTransactionId;
    return this;
  }

   /**
   * Get scheduledTransactionId
   * @return scheduledTransactionId
  **/
  @javax.annotation.Nonnull

  public UUID getScheduledTransactionId() {
    return scheduledTransactionId;
  }


  public void setScheduledTransactionId(UUID scheduledTransactionId) {
    this.scheduledTransactionId = scheduledTransactionId;
  }


  public ScheduledSubTransaction amount(Long amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The scheduled subtransaction amount in milliunits format
   * @return amount
  **/
  @javax.annotation.Nonnull

  public Long getAmount() {
    return amount;
  }


  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public ScheduledSubTransaction memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @javax.annotation.Nullable

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public ScheduledSubTransaction payeeId(UUID payeeId) {
    
    this.payeeId = payeeId;
    return this;
  }

   /**
   * Get payeeId
   * @return payeeId
  **/
  @javax.annotation.Nullable

  public UUID getPayeeId() {
    return payeeId;
  }


  public void setPayeeId(UUID payeeId) {
    this.payeeId = payeeId;
  }


  public ScheduledSubTransaction categoryId(UUID categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable

  public UUID getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(UUID categoryId) {
    this.categoryId = categoryId;
  }


  public ScheduledSubTransaction transferAccountId(UUID transferAccountId) {
    
    this.transferAccountId = transferAccountId;
    return this;
  }

   /**
   * If a transfer, the account_id which the scheduled subtransaction transfers to
   * @return transferAccountId
  **/
  @javax.annotation.Nullable

  public UUID getTransferAccountId() {
    return transferAccountId;
  }


  public void setTransferAccountId(UUID transferAccountId) {
    this.transferAccountId = transferAccountId;
  }


  public ScheduledSubTransaction deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the scheduled subtransaction has been deleted.  Deleted scheduled subtransactions will only be included in delta requests.
   * @return deleted
  **/
  @javax.annotation.Nonnull

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledSubTransaction scheduledSubTransaction = (ScheduledSubTransaction) o;
    return Objects.equals(this.id, scheduledSubTransaction.id) &&
        Objects.equals(this.scheduledTransactionId, scheduledSubTransaction.scheduledTransactionId) &&
        Objects.equals(this.amount, scheduledSubTransaction.amount) &&
        Objects.equals(this.memo, scheduledSubTransaction.memo) &&
        Objects.equals(this.payeeId, scheduledSubTransaction.payeeId) &&
        Objects.equals(this.categoryId, scheduledSubTransaction.categoryId) &&
        Objects.equals(this.transferAccountId, scheduledSubTransaction.transferAccountId) &&
        Objects.equals(this.deleted, scheduledSubTransaction.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, scheduledTransactionId, amount, memo, payeeId, categoryId, transferAccountId, deleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledSubTransaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    scheduledTransactionId: ").append(toIndentedString(scheduledTransactionId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    transferAccountId: ").append(toIndentedString(transferAccountId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("scheduled_transaction_id");
    openapiFields.add("amount");
    openapiFields.add("memo");
    openapiFields.add("payee_id");
    openapiFields.add("category_id");
    openapiFields.add("transfer_account_id");
    openapiFields.add("deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("scheduled_transaction_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("deleted");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScheduledSubTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ScheduledSubTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledSubTransaction is not found in the empty JSON string", ScheduledSubTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScheduledSubTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduledSubTransaction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduledSubTransaction.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("scheduled_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_transaction_id").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("payee_id") != null && !jsonObj.get("payee_id").isJsonNull()) && !jsonObj.get("payee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee_id").toString()));
      }
      if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
      }
      if ((jsonObj.get("transfer_account_id") != null && !jsonObj.get("transfer_account_id").isJsonNull()) && !jsonObj.get("transfer_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_account_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledSubTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledSubTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledSubTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledSubTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledSubTransaction>() {
           @Override
           public void write(JsonWriter out, ScheduledSubTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledSubTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScheduledSubTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScheduledSubTransaction
  * @throws IOException if the JSON string is invalid with respect to ScheduledSubTransaction
  */
  public static ScheduledSubTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledSubTransaction.class);
  }

 /**
  * Convert an instance of ScheduledSubTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

