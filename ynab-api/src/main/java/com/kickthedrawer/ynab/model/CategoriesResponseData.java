/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kickthedrawer.ynab.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kickthedrawer.ynab.model.CategoryGroupWithCategories;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kickthedrawer.ynab.JSON;

/**
 * CategoriesResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-18T14:52:04.431395-07:00[America/Phoenix]")
public class CategoriesResponseData {
  public static final String SERIALIZED_NAME_CATEGORY_GROUPS = "category_groups";
  @SerializedName(SERIALIZED_NAME_CATEGORY_GROUPS)
  private List<CategoryGroupWithCategories> categoryGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER_KNOWLEDGE = "server_knowledge";
  @SerializedName(SERIALIZED_NAME_SERVER_KNOWLEDGE)
  private Long serverKnowledge;

  public CategoriesResponseData() {
  }

  public CategoriesResponseData categoryGroups(List<CategoryGroupWithCategories> categoryGroups) {
    
    this.categoryGroups = categoryGroups;
    return this;
  }

  public CategoriesResponseData addCategoryGroupsItem(CategoryGroupWithCategories categoryGroupsItem) {
    this.categoryGroups.add(categoryGroupsItem);
    return this;
  }

   /**
   * Get categoryGroups
   * @return categoryGroups
  **/
  @javax.annotation.Nonnull

  public List<CategoryGroupWithCategories> getCategoryGroups() {
    return categoryGroups;
  }


  public void setCategoryGroups(List<CategoryGroupWithCategories> categoryGroups) {
    this.categoryGroups = categoryGroups;
  }


  public CategoriesResponseData serverKnowledge(Long serverKnowledge) {
    
    this.serverKnowledge = serverKnowledge;
    return this;
  }

   /**
   * The knowledge of the server
   * @return serverKnowledge
  **/
  @javax.annotation.Nonnull

  public Long getServerKnowledge() {
    return serverKnowledge;
  }


  public void setServerKnowledge(Long serverKnowledge) {
    this.serverKnowledge = serverKnowledge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoriesResponseData categoriesResponseData = (CategoriesResponseData) o;
    return Objects.equals(this.categoryGroups, categoriesResponseData.categoryGroups) &&
        Objects.equals(this.serverKnowledge, categoriesResponseData.serverKnowledge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryGroups, serverKnowledge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoriesResponseData {\n");
    sb.append("    categoryGroups: ").append(toIndentedString(categoryGroups)).append("\n");
    sb.append("    serverKnowledge: ").append(toIndentedString(serverKnowledge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_groups");
    openapiFields.add("server_knowledge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category_groups");
    openapiRequiredFields.add("server_knowledge");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CategoriesResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CategoriesResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoriesResponseData is not found in the empty JSON string", CategoriesResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CategoriesResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoriesResponseData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CategoriesResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("category_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_groups` to be an array in the JSON string but got `%s`", jsonObj.get("category_groups").toString()));
      }

      JsonArray jsonArraycategoryGroups = jsonObj.getAsJsonArray("category_groups");
      // validate the required field `category_groups` (array)
      for (int i = 0; i < jsonArraycategoryGroups.size(); i++) {
        CategoryGroupWithCategories.validateJsonObject(jsonArraycategoryGroups.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoriesResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoriesResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoriesResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoriesResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoriesResponseData>() {
           @Override
           public void write(JsonWriter out, CategoriesResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoriesResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CategoriesResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CategoriesResponseData
  * @throws IOException if the JSON string is invalid with respect to CategoriesResponseData
  */
  public static CategoriesResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoriesResponseData.class);
  }

 /**
  * Convert an instance of CategoriesResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

