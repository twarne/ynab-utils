/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kickthedrawer.ynab.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kickthedrawer.ynab.JSON;

/**
 * MonthSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-18T14:52:04.431395-07:00[America/Phoenix]")
public class MonthSummary {
  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private LocalDate month;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private Long income;

  public static final String SERIALIZED_NAME_BUDGETED = "budgeted";
  @SerializedName(SERIALIZED_NAME_BUDGETED)
  private Long budgeted;

  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private Long activity;

  public static final String SERIALIZED_NAME_TO_BE_BUDGETED = "to_be_budgeted";
  @SerializedName(SERIALIZED_NAME_TO_BE_BUDGETED)
  private Long toBeBudgeted;

  public static final String SERIALIZED_NAME_AGE_OF_MONEY = "age_of_money";
  @SerializedName(SERIALIZED_NAME_AGE_OF_MONEY)
  private Integer ageOfMoney;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public MonthSummary() {
  }

  public MonthSummary month(LocalDate month) {
    
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @javax.annotation.Nonnull

  public LocalDate getMonth() {
    return month;
  }


  public void setMonth(LocalDate month) {
    this.month = month;
  }


  public MonthSummary note(String note) {
    
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nullable

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    this.note = note;
  }


  public MonthSummary income(Long income) {
    
    this.income = income;
    return this;
  }

   /**
   * The total amount of transactions categorized to &#39;Inflow: Ready to Assign&#39; in the month
   * @return income
  **/
  @javax.annotation.Nonnull

  public Long getIncome() {
    return income;
  }


  public void setIncome(Long income) {
    this.income = income;
  }


  public MonthSummary budgeted(Long budgeted) {
    
    this.budgeted = budgeted;
    return this;
  }

   /**
   * The total amount budgeted in the month
   * @return budgeted
  **/
  @javax.annotation.Nonnull

  public Long getBudgeted() {
    return budgeted;
  }


  public void setBudgeted(Long budgeted) {
    this.budgeted = budgeted;
  }


  public MonthSummary activity(Long activity) {
    
    this.activity = activity;
    return this;
  }

   /**
   * The total amount of transactions in the month, excluding those categorized to &#39;Inflow: Ready to Assign&#39;
   * @return activity
  **/
  @javax.annotation.Nonnull

  public Long getActivity() {
    return activity;
  }


  public void setActivity(Long activity) {
    this.activity = activity;
  }


  public MonthSummary toBeBudgeted(Long toBeBudgeted) {
    
    this.toBeBudgeted = toBeBudgeted;
    return this;
  }

   /**
   * The available amount for &#39;Ready to Assign&#39;
   * @return toBeBudgeted
  **/
  @javax.annotation.Nonnull

  public Long getToBeBudgeted() {
    return toBeBudgeted;
  }


  public void setToBeBudgeted(Long toBeBudgeted) {
    this.toBeBudgeted = toBeBudgeted;
  }


  public MonthSummary ageOfMoney(Integer ageOfMoney) {
    
    this.ageOfMoney = ageOfMoney;
    return this;
  }

   /**
   * The Age of Money as of the month
   * @return ageOfMoney
  **/
  @javax.annotation.Nullable

  public Integer getAgeOfMoney() {
    return ageOfMoney;
  }


  public void setAgeOfMoney(Integer ageOfMoney) {
    this.ageOfMoney = ageOfMoney;
  }


  public MonthSummary deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
   * @return deleted
  **/
  @javax.annotation.Nonnull

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonthSummary monthSummary = (MonthSummary) o;
    return Objects.equals(this.month, monthSummary.month) &&
        Objects.equals(this.note, monthSummary.note) &&
        Objects.equals(this.income, monthSummary.income) &&
        Objects.equals(this.budgeted, monthSummary.budgeted) &&
        Objects.equals(this.activity, monthSummary.activity) &&
        Objects.equals(this.toBeBudgeted, monthSummary.toBeBudgeted) &&
        Objects.equals(this.ageOfMoney, monthSummary.ageOfMoney) &&
        Objects.equals(this.deleted, monthSummary.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(month, note, income, budgeted, activity, toBeBudgeted, ageOfMoney, deleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonthSummary {\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    budgeted: ").append(toIndentedString(budgeted)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    toBeBudgeted: ").append(toIndentedString(toBeBudgeted)).append("\n");
    sb.append("    ageOfMoney: ").append(toIndentedString(ageOfMoney)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("month");
    openapiFields.add("note");
    openapiFields.add("income");
    openapiFields.add("budgeted");
    openapiFields.add("activity");
    openapiFields.add("to_be_budgeted");
    openapiFields.add("age_of_money");
    openapiFields.add("deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("month");
    openapiRequiredFields.add("income");
    openapiRequiredFields.add("budgeted");
    openapiRequiredFields.add("activity");
    openapiRequiredFields.add("to_be_budgeted");
    openapiRequiredFields.add("deleted");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MonthSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MonthSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonthSummary is not found in the empty JSON string", MonthSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MonthSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonthSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MonthSummary.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonthSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonthSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonthSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonthSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MonthSummary>() {
           @Override
           public void write(JsonWriter out, MonthSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonthSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MonthSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MonthSummary
  * @throws IOException if the JSON string is invalid with respect to MonthSummary
  */
  public static MonthSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonthSummary.class);
  }

 /**
  * Convert an instance of MonthSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

